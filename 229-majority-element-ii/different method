//Boyer-Moore Voting Algorithm

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int count1 = 0, count2 = 0;
        int candidate1 = 0, candidate2 = 1; // start with any two different values

        // 1st pass: Find potential candidates
        for (int num : nums) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            } else if (count1 == 0) {
                candidate1 = num;
                count1 = 1;
            } else if (count2 == 0) {
                candidate2 = num;
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }

        // 2nd pass: Verify the actual counts
        count1 = count2 = 0;
        for (int num : nums) {
            if (num == candidate1) count1++;
            else if (num == candidate2) count2++;
        }

        vector<int> result;
        int n = nums.size();
        if (count1 > n / 3) result.push_back(candidate1);
        if (count2 > n / 3) result.push_back(candidate2);

        return result;
    }
};


nums = {2, 2, 3, 4, 4, 4}
Initial values:
candidate1 = 0, count1 = 0

candidate2 = 1, count2 = 0

Step-by-step:
Step	num	candidate1	count1	candidate2	count2	Explanation
1	2	0	0	1	0	count1 == 0 → candidate1 = 2, count1 = 1
2	2	2	1	1	0	num == candidate1 → count1 = 2
3	3	2	2	1	0	count2 == 0 → candidate2 = 3, count2 = 1
4	4	2	2	3	1	num != candidate1 and num != candidate2 and both counts > 0 → decrement both counts
2	1	3	0	
5	4	2	1	3	0	count2 == 0 → candidate2 = 4, count2 = 1
6	4	2	1	4	1	num == candidate2 → count2 = 2

After first pass:
candidate1 = 2, count1 = 1

candidate2 = 4, count2 = 2

Second pass: verify actual counts
Count occurrences of candidate1 and candidate2 in nums:

2 appears 2 times

4 appears 3 times

Check if counts > n/3
n = 6, n/3 = 2

2 appears 2 times → not greater than 2 → ignore

4 appears 3 times → greater than 2 → include

Final result:
cpp
Copy
Edit
[4]
